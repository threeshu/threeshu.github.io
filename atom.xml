<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸡的挣扎</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://threeshu.github.io/"/>
  <updated>2019-11-14T14:56:26.044Z</updated>
  <id>https://threeshu.github.io/</id>
  
  <author>
    <name>Nil</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读-七芒星</title>
    <link href="https://threeshu.github.io/2019/11/14/%E8%AF%BB-%E4%B8%83%E8%8A%92%E6%98%9F/"/>
    <id>https://threeshu.github.io/2019/11/14/读-七芒星/</id>
    <published>2019-11-14T07:46:04.000Z</published>
    <updated>2019-11-14T14:56:26.044Z</updated>
    
    <content type="html"><![CDATA[<p>最近在家休息，本给自己列了诸多计划，但万事开头难，拖延症又很严重，导致一个todo都没完成，然后就有点焦灼。窗帘关闭！台灯开启！电脑启动！教程开起来！没几分钟，就可能起身出去接水，再上趟厕所，随手点开yys可能就不受控制地肝了起来……这种状态，真是啥也干不成。</p><p>为了让自己能够完整干完一件事情，不论是什么，于是时隔七八个月都没碰BL小说的我，点开了收藏许久的《七芒星》。我看书有个习惯，会先看简介。两种简介会吸引我，一种是简介清晰明朗并且是我喜欢的题材套路；一种是简介让我看不懂，那我会试试。</p><p>老实说《七芒星》的简介并没有吸引到我，因为是属于双向救赎的题材。早些年我一直在看狗蛋的文，狗蛋的题材基本是救赎的类型。我并不说狗蛋写得不好，而是这种类型文看多了，时间长了，我开始觉得索然无味。类型是劝退的，人设是吸引的。我抱着完整看完它就好的心态尝试。正如作者所言，这是一部内容较为现实，又不那么现实的作品。主角团们没有金手指，我所看到的他们，一个是日复一日地练琴写歌不被困难打倒的乐队主唱，一个是不分昼夜地抽烟写代码的编程高手。结局也许不那么现实，但是过程十分实在。努力不放弃才有机会成功，这个是我从这部作品中感受到的信息。现实就是，没什么是天上能掉馅儿饼的。我花了一天时间来看这部小说，相当于这一整天都在调整最近浑浑噩噩的状态，我觉得效果显著。不然，我现在也不会在电脑前敲这个类似读后感的胡言乱语。</p><p>只要自己觉得在做的，在看的是有用的，那就不是在浪费时间==。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在家休息，本给自己列了诸多计划，但万事开头难，拖延症又很严重，导致一个todo都没完成，然后就有点焦灼。窗帘关闭！台灯开启！电脑启动！教程开起来！没几分钟，就可能起身出去接水，再上趟厕所，随手点开yys可能就不受控制地肝了起来……这种状态，真是啥也干不成。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="日志" scheme="https://threeshu.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="日志" scheme="https://threeshu.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Have something to say in 2019</title>
    <link href="https://threeshu.github.io/2019/10/31/Have-something-to-say-in-2019/"/>
    <id>https://threeshu.github.io/2019/10/31/Have-something-to-say-in-2019/</id>
    <published>2019-10-31T15:29:36.000Z</published>
    <updated>2019-10-31T15:32:16.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019，Never-Regret-It"><a href="#2019，Never-Regret-It" class="headerlink" title="2019，Never Regret It"></a>2019，Never Regret It</h1><p>说是2019年的总结，其实不太精准，确切地说应该是2018.11月至2019.11月的回顾，甚至追溯到2018年刚毕业的夏天。毕竟，离2020的元旦还有2个月，离2020的春节还有3个月，实在不算是一个年终总结，更偏向于对一个阶段的反思。</p><h5 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h5><p>最近快要换第三家公司了，毕业一年半，却连换三家公司，不可谓是不频繁。若问起缘由，我总能列出个一二三四五六七来，但归根结底，就是对未来规划不明确所导致。如果我不想成为一条咸鱼，大一时就该好好了解本专业前途如何，并对未来有所规划，而不是当一天和尚敲一天钟，赖我。等到大学毕业面临就业时，发现大学所学与企业所需职业技能有所偏差后，其实已经为时已晚（如果想找一份好工作）。</p><p>我本科是计算机科学与技术，按理说至少找个互联网相关的行业工作，可能是由于我太菜了，技能不咋地，秋招的时候最终进入一家主业是硬件的公司当测试。虽说是硬件公司，但是也有软件部门，而我却好死不死地被分进算是软硬件测试的部门，测试话机。如同矮子里拔高个，若非要在软件测试和硬件测试中选一样，那我选择软件测试。于是我鼓起勇气跟组长说明我的诉求，但是并没有反响，大概是由于组内人手不够的原因吧。我实在是无法忍受测试话机过程中发出的噪音，工作的无趣以及硬性加班，于是在18年的11月提出了离职。</p><p>我以比第一份低许多的薪资进入了第二家互联网公司，为何低许多？原因还是太菜了，对于软件测试的知识仅停留在大学《软件工程》中的设计测试用例上，于是招聘方压了我的工资。当时一心只想脱离硬件测试，想着从事软件测试后要好好努力，薪资低应该只是暂时的。我看着这家公司从走上坡到滚下坡，只用了差不多一年时间，真快。于是我又又离职了。</p><p>在第二家公司的一年社畜生涯中，我从刚开始的功能测试到最后负责服务端的接口自动化测试，算是有成长吧（可能针对计算机专业的来说不足挂齿）。而在这当中我也逐渐明白了我今后的道路就是要一路爬，直到能胜任测开，直到能当架构师，这大概是我人生之后的一个又一个阶段，或许未来不能如期实现，但我先做一个美好的设想吧，至少有个工作目标。</p><p>我从对工作的懵懵懂懂，到树立起工作的目标，到跨过功能测试-&gt;自动化测试岗位的坎，用了一年多时间。好长啊，一直在走错路，绕远路。不敢说有多累，毕竟我本质还是咸鱼，但心态还是崩了几次，以至于频繁跟朋友发泄负能量，很痛苦也很抱歉。虽然第三家公司的薪资依然不满意，但是至少岗位本身让我对未来有所期待，有点想要努力认真了。</p><h5 id="关于个人"><a href="#关于个人" class="headerlink" title="关于个人"></a>关于个人</h5><p>我对自己缺点的认知来源于星座（笑），我选择恐惧症蛮严重，犹犹豫豫，摇摆不定。其实明明心中已经有答案了，但总会在选项中反复横跳（苦笑）。很重要的一个点是，读书时可能不会暴露的缺点在工作中显得尤为明显。那就是沟通。学生时期我一直是单打独斗的类型，不参加活动也就少有需要各方沟通的环节。沟通迄今为止对我来说都是个难题，人的性格我觉得是不会改变，至多只能说是有所伪装以及伪装得熟练与否。</p><p>初入职场的菜鸟我，以为大家都对“时间截点”有敬畏之心。如果把每一个工作环节比做交作业，那我是忘了还有不交作业或者迟交作业的同学存在。作为研发流程的最后一个环节，测试其实是需要把控整个流程的。刚开始我不懂，以为只要到了提测时间履行我的工作职责就行，只关注却没有推进流程，只是在等，等一个提测，后面压缩得只是我的测试周期罢了。</p><p>我不是主动型人格。以前我觉得push流程就是在命令别人做事情或者在催促别人，这个行为本身是我不能接受的。很烦，大家就不能按照约定完成事情，有问题直接抛出来或者让我的测试周期也顺延一下吗？菜鸡我如是想。前一阵子有一个前辈是这么说的，“你不能以你的标准去衡量整个团队”。金句。迫使我能够快速扭转（伪装）我性格的原因只有一个，那就是已经损害到了我的既定利益。毕竟，加班很痛苦，不是我的锅，我却要加班，听起来很像冤大头。我当然不当这个冤大头，那就只能沟通反馈一条龙，很痛苦。每次聊天框中的字我都要反复斟酌，这个语气行不行？是否交代了前因后果？有没有打错字？好累。</p><p>我的leader对我说有问题你就直接问开发。虽然为了确保工作能够顺利进行，直接问开发是最快最有效的方法。但我的性格不允许我这么做，很痛苦。原因有二，其一，我好面子吧，问得问题太蠢被diss怎么办；其二，开发同学也很忙，凭什么要浪费时间给你讲东西，也许你还听不懂？很煎熬，我真的很怕浪费别人时间，所以我都是自己先百度谷歌一条龙，然后挑些细节点再去问，对的，这样子做我的效率有点低。又一个前辈是这么说的“如果你的工作能帮助开发提高他的效率，他是乐意用预留出的时间给你讲解你问的问题的”。nice。这种等价交换的理论，才能让我问题提得更加理直气壮。前提是我精进了自己的能力，帮助开发同学提高了效率。</p><p>沟通是社畜的必修课，我大概只能一直重修。</p><h5 id="关于未来"><a href="#关于未来" class="headerlink" title="关于未来"></a>关于未来</h5><p>实现目标是一个长久的过程。回顾这毕业一年多的工作经历，没啥可遗憾的，看起来是弯弯绕绕一条曲折路，实际上我做的都是当时那个阶段的最佳选择（个人角度）。希望2020年能多写博客总结吧。</p><p>理想的生活：有钱，搞事业，搞兴趣爱好。</p><h5 id="2019盘点"><a href="#2019盘点" class="headerlink" title="2019盘点"></a>2019盘点</h5><table><thead><tr><th style="text-align:left">电视剧/电影/纪录片</th><th>番剧</th><th>专业书</th><th>闲书</th><th>漫画</th><th>BL小说</th></tr></thead><tbody><tr><td style="text-align:left">白蛇缘起<br>命运之夜-1<br>东宫<br>陈情令<br>李尸王朝<br>夏目友人帐<br>波西米亚狂想曲<br>复仇者联盟-4<br>大侦探皮卡丘<br>卡罗尔<br>蜘蛛侠-2<br>命运之夜-2<br>狮子王<br>魔童<br>历史那些事2<br>烈火英雄<br>中国古兵器2<br>罗小黑战记动画+电影<br>baby animal-20%</td><td>多罗罗<br>约定的梦幻岛-50%<br>五等分的新娘<br>命运石之门<br>鬼灭之刃<br>水果篮子<br>进击的巨人-20%<br>given被赠与的希望<br>排球少年-1</td><td>图解http<br>ThinkPython<br>算法图解<br>web接口开发与软件测试<br>sql必知必会-50%<br>软件测试的艺术</td><td>一只特立独行的猪-王小波<br>生活是很好玩的-汪曾祺<br>一束光阴付苦茶-汪曾祺<br>人匠-无色方糖<br>人间草木-汪曾祺<br>超大量工作法-佐藤大<br>故都的秋-郁达夫-30%<br>湘行散记-沈从文-10%<br>小王子<br>人生的意义-75%</td><td>瑛-麻手上下<br>镖人-许先哲<br>迷津书店<br>野蛮情人-山本小铁子<br>野画集<br>绝顶</td><td>暗渡-郑二<br>阎王不收<br>离婚之后我还留着你的外套-不问三九<br>如你走过冬天-芥末君<br>竹马温小花-solo<br>不配喜欢<br>复刻情人-clockwork<br>惊蜕-狂上加狂<br>捡星星-不问三九<br>恋爱错误宝典-反舌鸟</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2019，Never-Regret-It&quot;&gt;&lt;a href=&quot;#2019，Never-Regret-It&quot; class=&quot;headerlink&quot; title=&quot;2019，Never Regret It&quot;&gt;&lt;/a&gt;2019，Never Regret It&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="规划总结" scheme="https://threeshu.github.io/categories/%E8%A7%84%E5%88%92%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="规划总结" scheme="https://threeshu.github.io/tags/%E8%A7%84%E5%88%92%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>接口用例设计</title>
    <link href="https://threeshu.github.io/2019/06/06/%E6%8E%A5%E5%8F%A3%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1/"/>
    <id>https://threeshu.github.io/2019/06/06/接口用例设计/</id>
    <published>2019-06-05T16:36:49.000Z</published>
    <updated>2019-10-31T12:38:41.040Z</updated>
    
    <content type="html"><![CDATA[<p>有时候会碰到三四十个参数的接口，数量之巨大令人惶惶不安。</p><p>这时候我就掉头发啊，这该怎么设计接口用例啊，总不能无脑参数组合吧？C40/1+C40/2+…C40/40=反正很大！</p><p>我有那么蠢吗？还真有！</p><p>面对只有两三个参数的接口，我还真的是这么办的！然后碰到40个接口的时候，我就傻眼了！让你不学无术！让你不学无术！让你不学无术！</p><p>于是经过多番百度+Google之后，以我浅薄的理解，大概就是三个步骤：</p><p>1.理出这个接口的业务逻辑，优先级1（相当于测试用例的P0用例）</p><p>我觉得这个是最难的步骤，因为你将面临重重阻碍。可能是接口文档不完整，缺失接口的描述细节，只草草记录接口的参数，有时候甚至连参数值都没有，导致你无法获取到这个接口是在什么情况下会调用到。可能是开发的不配合，你去询问开发逻辑细节，他们却爱搭不理，消息已读不回，导致你不仅无法完成任务还很烦躁。但是，你厚着脸皮也要搞清楚这些业务逻辑，如果你只是一知半解，浑浑噩噩，之后编写接口用例的时候就是你苦难的开端。</p><p>2.根据接口参数的含义开拓思维，想象用户会有哪些骚操作，进行参数组合，优先级2（相当于测试用例的P1用例）</p><p>这个过程的参数组合也不是无脑组合，你得思考一下这个场景是否有必要，没有必要的场景设计出来也是冗余。如果刚开始自己无法判断是不是冗余的场景，可以搞一个测试导图评审，人多力量大！</p><p>3.接口参数的数据类型、异常值校验等等（相当于测试用例的P2、P3级用例）</p><p>请合理的放飞自我展开想象。</p><p>菜鸡的我目前只能想到这些，压测之类的接口测试目前我还没涉及到，待我之后康康！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候会碰到三四十个参数的接口，数量之巨大令人惶惶不安。&lt;/p&gt;
&lt;p&gt;这时候我就掉头发啊，这该怎么设计接口用例啊，总不能无脑参数组合吧？C40/1+C40/2+…C40/40=反正很大！&lt;/p&gt;
&lt;p&gt;我有那么蠢吗？还真有！&lt;/p&gt;
&lt;p&gt;面对只有两三个参数的接口，我还真
      
    
    </summary>
    
      <category term="接口" scheme="https://threeshu.github.io/categories/%E6%8E%A5%E5%8F%A3/"/>
    
    
      <category term="接口" scheme="https://threeshu.github.io/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>《算法图解》读书笔记</title>
    <link href="https://threeshu.github.io/2019/05/07/ArithmeticStuding/"/>
    <id>https://threeshu.github.io/2019/05/07/ArithmeticStuding/</id>
    <published>2019-05-07T13:22:02.000Z</published>
    <updated>2019-10-31T12:38:41.034Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><p>在公司的公共书架上发现一本名为《算法图解》的书，代码示例都是基于python。本书是以图解的方式来帮助读者了解算法，而我个人又恰巧偏好这种讲解方式，所以就借了。<br>没想到啊没想到啊，大学阶段学得如此痛苦的算法，在这本书里讲得通透易懂。不过这本书介绍的算法比较少，旨在帮助初学者入门，培养对算法的兴趣。<br>主要是图示的讲解方式实在是非常棒，以后自己做笔记也可以学着这么记录。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="K最近邻算法"><a href="#K最近邻算法" class="headerlink" title="K最近邻算法"></a>K最近邻算法</h4><p>使用KNN来做两项基本工作-分类和回归；</p><ul><li><p>分类就是编组；（需要挑选一种合适的特征和计算方式来分组）</p></li><li><p>回归就是预测结果。</p></li></ul><h4 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h4><p>在4磅背包里放以下哪几种物品价值最高？</p><table><thead><tr><th>物品</th><th>重量/磅</th><th>价值/美元</th></tr></thead><tbody><tr><td>音响</td><td>4</td><td>3000</td></tr><tr><td>笔记本电脑</td><td>3</td><td>2000</td></tr><tr><td>吉他</td><td>1</td><td>1500</td></tr></tbody></table><p>使用动态规划算法（从小问题解决，逐步解决大问题）可以解决这个问题，先画一个网格。<br>各行为不同容量的背包，各列为可选择的商品。</p><table><thead><tr><th></th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>吉他</td><td>1500</td><td>1500</td><td>1500</td><td>1500</td></tr><tr><td>音响</td><td></td><td></td><td></td><td></td></tr><tr><td>笔记本电脑</td><td></td><td></td><td></td></tr></tbody></table><p>每一行都考虑当前重量（4种重量）下，所能放进背包里的最大价值。<br>例如：音响这一行，可供选择的商品有吉他和音响；<br>1磅这一列，只能选吉他，因为音响有4磅放不进去；<br>2磅这一列，只能选吉他，因为音响有4磅放不进去；<br>3磅这一列，只能选吉他，因为音响有4磅放不进去；<br>4磅这一列，也无法同时放进吉他和音响；选择音响，因为价值3000比吉他1500高；<br>这一回合最终生成的表格如下：</p><table><thead><tr><th></th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>吉他</td><td>1500</td><td>1500</td><td>1500</td><td>1500</td></tr><tr><td>音响</td><td>1500</td><td>1500</td><td>1500</td><td>3000</td></tr><tr><td>笔记本电脑</td><td></td><td></td><td></td></tr></tbody></table><p>以此类推，完成这个表格，最终结果为笔记本电脑这一行第四列的值。</p><table><thead><tr><th></th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>吉他</td><td>1500</td><td>1500</td><td>1500</td><td>1500</td></tr><tr><td>音响</td><td>1500</td><td>1500</td><td>1500</td><td>3000</td></tr><tr><td>笔记本电脑</td><td>1500</td><td>1500</td><td>2000</td><td>3500</td></tr></tbody></table><p>计算每个单元格使用的计算公式如下：</p><p>两者中最大的那个；<br>①上一个单元格的值（cell[i-1][j]）<br>②当前商品的价值+剩余空间的最高价值（cell[i-1][j-当前的重量]）</p><p>=======================未完待续=========================</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h3&gt;&lt;p&gt;在公司的公共书架上发现一本名为《算法图解》的书，代码示例都是基于python。本书是以图解的方式来帮助读者了解算法，而我个人
      
    
    </summary>
    
      <category term="算法" scheme="https://threeshu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://threeshu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>被Hexo折磨的一天</title>
    <link href="https://threeshu.github.io/2019/04/21/Nothing%20is%20OK/"/>
    <id>https://threeshu.github.io/2019/04/21/Nothing is OK/</id>
    <published>2019-04-20T16:00:00.000Z</published>
    <updated>2019-10-31T12:38:41.037Z</updated>
    
    <content type="html"><![CDATA[<p>搞了一天终于把hexo同步了（划掉），实际上是从头再来ORZ</p><h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><p>自己的笔记本有安装Hexo，放在厦门。<br>公司的笔记本没安Hexo，却带回了家。<br>且GitHub上没有上传Hexo的源码。<br>幸好博客上原本就只有一篇…我决定从头再来…</p><h3 id="安装必备应用程序和必要步骤"><a href="#安装必备应用程序和必要步骤" class="headerlink" title="安装必备应用程序和必要步骤"></a>安装必备应用程序和必要步骤</h3><p>安装Node.js，查看工具是否安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure></p><p>安装Git<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure></p><p>GitHub中配置名为&lt;your_name&gt;.github.io的repository[可百度]<br>GitHub中Setting-&gt;SSH and GPG keys配置SSH[可百度]</p><h3 id="搭建Hexo"><a href="#搭建Hexo" class="headerlink" title="搭建Hexo"></a>搭建Hexo</h3><h4 id="使用npm指令安装hexo"><a href="#使用npm指令安装hexo" class="headerlink" title="使用npm指令安装hexo"></a>使用npm指令安装hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="使用以下指令建站"><a href="#使用以下指令建站" class="headerlink" title="使用以下指令建站"></a>使用以下指令建站</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init   </span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h4 id="建站后查看目录结构如下"><a href="#建站后查看目录结构如下" class="headerlink" title="建站后查看目录结构如下"></a>建站后查看<folder>目录结构如下</folder></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h4 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h4><p>打开_config.yml,我配置下面这些参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 网站名称</span><br><span class="line">title: 菜鸡的挣扎</span><br><span class="line"># 作者名字</span><br><span class="line">author: ThreeShu</span><br><span class="line"># 时区，一定要写对</span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"># 部署信息</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  # 将要部署的仓库地址</span><br><span class="line">  repo: https://github.com/yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><h3 id="本地搭建Git仓库"><a href="#本地搭建Git仓库" class="headerlink" title="本地搭建Git仓库"></a>本地搭建Git仓库</h3><p>若你建站的文件夹名为Hexo，在Git中利用以下命令进入你的文件夹（当前在根目录下，我的Hexo在Y盘）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd y:</span><br><span class="line">$ cd Hexo</span><br><span class="line"># 利用以下命令，初始化Git仓库</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure></p><h4 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h4><p>写文章所用命令可查看官网<a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/writing</a><br>每次对文件夹Hexo下的内容有做改动，利用以下命令就可以在localhost：4000本地查看页面修改后的状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo c</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br><span class="line">利用以下命令部署到GitHub服务器后，访问yourname.github.io.git就可以看自己的博客了！</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><h4 id="上传建站的源码至GitHub分支hexo"><a href="#上传建站的源码至GitHub分支hexo" class="headerlink" title="上传建站的源码至GitHub分支hexo"></a>上传建站的源码至GitHub分支hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 关联远程仓库</span><br><span class="line">$ git add remote origin &lt;远程仓库地址&gt;</span><br><span class="line"># 将修改同步到本地分支线</span><br><span class="line">$ git add *</span><br><span class="line">$ git commit -m &quot;上传&quot;</span><br><span class="line"># 将本地分支线同步到远程hexo分支线</span><br><span class="line">$ git push origin hexo</span><br></pre></td></tr></table></figure><h3 id="多机同步"><a href="#多机同步" class="headerlink" title="多机同步"></a>多机同步</h3><p>你有一台新电脑，你想在新电脑也可以更新博客，这时候你就可以将远程分支hexo的代码拉下来，就可以随意操作再上传至GitHub<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 初始化本地仓库</span><br><span class="line">$ git init</span><br><span class="line"># 关联远程仓库、</span><br><span class="line">$ git remote add origin https://github.com/yourname/yourname.github.io.git</span><br><span class="line"># 拉取分支hexo的内容</span><br><span class="line">$ git pull origin hexo</span><br><span class="line"></span><br><span class="line"># 安装hexo</span><br><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;搞了一天终于把hexo同步了（划掉），实际上是从头再来ORZ&lt;/p&gt;
&lt;h3 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h3&gt;&lt;p&gt;自己的笔记本有安装Hexo，放在厦门。&lt;br&gt;公
      
    
    </summary>
    
      <category term="HEXO" scheme="https://threeshu.github.io/categories/HEXO/"/>
    
    
      <category term="吐槽" scheme="https://threeshu.github.io/tags/%E5%90%90%E6%A7%BD/"/>
    
      <category term="HEXO" scheme="https://threeshu.github.io/tags/HEXO/"/>
    
  </entry>
  
</feed>
